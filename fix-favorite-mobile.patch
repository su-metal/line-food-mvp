*** これは説明用のダミー見出しです（git applyは無視します） ***

--- a/web/index.html
+++ b/web/index.html
@@
-        if (favBtn) {
-          const sid = String(shop?.id ?? shop?.shop_id ?? "");
-          (async () => {
-            const userKey = await getUserKey();
-            const favSet = readFavSetSync(userKey);
-
-            // 1) まずローカル状態を反映（遷移しても維持）
-            applyFavUI(favBtn, favSet.has(sid));
-
-            // 2) クリックでトグル（楽観UI→サーバ同期→失敗時ロールバック）
-            favBtn.onclick = async () => {
-              const nowFav = favSet.has(sid);
-              const willFav = !nowFav;
-
-              // 楽観反映
-              if (willFav) favSet.add(sid);
-              else favSet.delete(sid);
-              writeFavSetSync(userKey, favSet);
-              applyFavUI(favBtn, willFav);
-
-              try {
-                if (willFav) await favoriteAdd(sid);
-                else await favoriteRemove(sid);
-              } catch (e) {
-                console.warn("favorite sync failed, rollback:", e);
-                // ロールバック
-                if (willFav) favSet.delete(sid);
-                else favSet.add(sid);
-                writeFavSetSync(userKey, favSet);
-                applyFavUI(favBtn, !willFav);
-              }
-            };
-
-            // 3) 余力があればサーバ真実に合わせて上書き（LIFF内のみ）
-            try {
-              if (isLIFFInClient()) {
-                const idToken = liff.getIDToken();
-                const r = await fetch(
-                  `${CONFIG.API_BASE}/api/favorites?shopId=${encodeURIComponent(
-                    sid
-                  )}`,
-                  {
-                    headers: { Authorization: "Bearer " + idToken },
-                  }
-                );
-                const j = await r.json().catch(() => null);
-                if (r.ok && (j?.isFavorited || j?.favorited)) {
-                  if (!favSet.has(sid)) {
-                    favSet.add(sid);
-                    writeFavSetSync(userKey, favSet);
-                    applyFavUI(favBtn, true);
-                  }
-                }
-              }
-            } catch (e) {
-              console.warn("favorite init failed:", e);
-            }
-          })();
-        }
+        if (favBtn) {
+          const sid = String(shop?.id ?? shop?.shop_id ?? "");
+          (async () => {
+            const userKey = await getUserKey();
+            const favSet = readFavSetSync(userKey);
+
+            // 1) ローカル状態を即反映（遷移しても維持）
+            applyFavUI(favBtn, favSet.has(sid));
+
+            // 2) クリックでトグル（楽観UI→サーバ同期／未対応系はロールバックしない）
+            favBtn.onclick = async () => {
+              // 二重タップ防止（特にスマホ）
+              if (favBtn.dataset.busy === "1") return;
+              favBtn.dataset.busy = "1";
+
+              const nowFav = favSet.has(sid);
+              const willFav = !nowFav;
+
+              // 楽観反映＋保存
+              if (willFav) favSet.add(sid); else favSet.delete(sid);
+              writeFavSetSync(userKey, favSet);
+              applyFavUI(favBtn, willFav);
+
+              // LIFF外はサーバ同期しない（ローカル保持）
+              if (!isLIFFInClient()) { favBtn.dataset.busy = "0"; return; }
+
+              let result = null;
+              try {
+                result = willFav ? await favoriteAdd(sid) : await favoriteRemove(sid);
+              } catch (e) {
+                // 例外を投げる実装にも対応：bad_request 等は未対応扱い
+                const msg = (e && (e.message || String(e))) || "";
+                const status = e?.status;
+                result = {
+                  ok: false,
+                  status,
+                  unsupported: status === 400 || /bad_request|not\s*found|method\s*not\s*allowed/i.test(msg),
+                  error: e
+                };
+              } finally {
+                favBtn.dataset.busy = "0";
+              }
+
+              // 400/404/405 等の未対応系はロールバックしない（ローカルのみで維持）
+              if (result && (result.unsupported === true ||
+                             result.status === 400 || result.status === 404 || result.status === 405)) {
+                console.info("favorite: server unsupported/remove not available → keep local only.");
+                return;
+              }
+
+              // 通常の失敗のみロールバック
+              if (!result || result.ok === false) {
+                console.warn("favorite sync failed, rollback:", result);
+                if (willFav) favSet.delete(sid); else favSet.add(sid);
+                writeFavSetSync(userKey, favSet);
+                applyFavUI(favBtn, !willFav);
+              }
+            };
+
+            // 3) 初期サーバ状態で上書き（数値IDのみ。UUIDは400になるためスキップ）
+            try {
+              if (isLIFFInClient() && /^\d+$/.test(sid)) {
+                const idToken = liff.getIDToken();
+                const r = await fetch(
+                  `${CONFIG.API_BASE}/api/favorites?shopId=${encodeURIComponent(sid)}`,
+                  { headers: { Authorization: "Bearer " + idToken } }
+                );
+                const j = await r.json().catch(() => null);
+                if (r.ok && (j?.isFavorited !== undefined || j?.favorited !== undefined)) {
+                  const on = !!(j.isFavorited ?? j.favorited);
+                  if (on) favSet.add(sid); else favSet.delete(sid);
+                  writeFavSetSync(userKey, favSet);
+                  applyFavUI(favBtn, on);
+                }
+              }
+            } catch (e) {
+              console.warn("favorite init failed:", e);
+            }
+          })();
+        }
